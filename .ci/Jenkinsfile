#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/package-registry"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL='INFO'
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_REGISTRY_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_IMG = "${env.DOCKER_REGISTRY}/package-registry/package-registry"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
    upstream 'Beats/package-storage/master'
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        setEnvVar("GO_VERSION", readFile(file: "${BASE_DIR}/.go-version"))
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Checks formatting / linting',script: 'mage -debug check')
          }
        }
      }
    }
    /**
     Build the project from code..
     */
    stage('Build') {
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Checks formatting / linting',script: 'mage -debug build')
          }
        }
      }
    }
    /**
     Execute unit tests.
     */
    stage('Test') {
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Runs the (unit) tests',script: 'mage -debug test|tee tests-report.txt')
          }
        }
      }
      post {
        always {
          junitResults()
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('TestIntegration') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/go/bin:${env.PATH}"
      }
      steps {
        deleteDir()
        unstash 'source'
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Runs the (integration) tests',script: 'mage -debug testIntegration|tee test-report.txt')
          }
        }
        post {
          always {
            junitResults()
          }
        }
      }
    }
    /**
     Publish Docker images.
     */
    stage('Publish Docker image'){
      environment {
        DOCKER_IMG_TAG = "${env.DOCKER_IMG}:${env.GIT_BASE_COMMIT}"
        DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG}:${env.BRANCH_NAME}"
      }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          dockerLogin(secret: "${env.DOCKER_REGISTRY_SECRET}",
            registry: "${env.DOCKER_REGISTRY}")
          sh(label: 'Build Docker image',
            script: "docker build -t ${env.DOCKER_IMG_TAG} .")
          sh(label: 'Push Docker image sha',
            script: "docker push ${env.DOCKER_IMG_TAG}")
          sh(label: 'Re-tag Docker image',
            script: "docker tag ${env.DOCKER_IMG_TAG} ${env.DOCKER_IMG_TAG_BRANCH}")
          sh(label: 'Push Docker image name',
            script: "docker push ${env.DOCKER_IMG_TAG_BRANCH}")
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def junitResults(){
  def testsReport = "${BASE_DIR}/tests-report.txt"
  def junitReport = "${BASE_DIR}/junit-report.xml"
  withMageEnv(){
    sh(
      label: 'Convert test results to JUnit',
      script: "go-junit-report > ${junitReport} < ${testsReport}"
    )
  }
  junit(allowEmptyResults: true,
    keepLongStdio: true,
    testResults: "${junitReport}")
}

def withGoEnv(Map params = [:], Closure body) {
  def version = params.containsKey('version') ? params.version : '1.14.2'
  def pkgs = params.containsKey('pkgs') ? params.pkgs : []
  def os = 'linux'
  withEnv([
      "HOME=${WORKSPACE}"
  ]){
      withEnv([
          "PATH=${HOME}/go/bin:${HOME}/.gvm/versions/go${version}.${os}.amd64/bin:${PATH}",
          "GOROOT=${HOME}/.gvm/versions/go${version}.${os}.amd64",
          "GOPATH=${HOME}"
      ]){
          sh(label: "Installing go ${version}", script: "gvm ${version}")
          pkgs?.each{ p ->
              sh(label: "Installing ${pkgs}", script: "go get -u ${p}")
          }
          body()
      }
  }
}

def withMageEnv(Closure body){
  withGoEnv(
    version: "${GO_VERSION}",
    pkgs: [
     "github.com/magefile/mage",
     "github.com/elastic/go-licenser",
     "golang.org/x/tools/cmd/goimports",
     "github.com/jstemmer/go-junit-report"
     ]
  ){
    body()
  }
}
