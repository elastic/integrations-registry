#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/package-registry"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL='INFO'
    DOCKER_REGISTRY = 'docker.elastic.co'
    DOCKER_REGISTRY_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_IMG = "${env.DOCKER_REGISTRY}/package-registry/package-registry"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
    upstream 'Beats/package-storage/master'
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        setEnvVar("GO_VERSION", readFile(file: "${BASE_DIR}/.go-version")?.trim())
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        cleanup()
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Checks formatting / linting',script: 'mage -debug check')
          }
        }
      }
    }
    /**
     Build the project from code..
     */
    stage('Build') {
      steps {
        cleanup()
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Checks formatting / linting',script: 'mage -debug build')
          }
        }
      }
    }
    /**
     Execute unit tests.
     */
    stage('Test') {
      steps {
        cleanup()
        dir("${BASE_DIR}"){
          withMageEnv(){
            sh(label: 'Runs the (unit) tests',script: 'mage -debug test|tee tests-report.txt')
          }
        }
      }
      post {
        always {
          convertGoTestResults(
            input: "${BASE_DIR}/tests-report.txt",
            output: "${BASE_DIR}/junit-report.xml"
          )
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('TestIntegration') {
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.HOME}/go/bin:${env.PATH}"
      }
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Runs the (integration) tests',script: 'mage -debug testIntegration|tee tests-report.txt')
          }
        }
      }
      post {
        always {
          convertGoTestResults(
            input: "${BASE_DIR}/tests-report.txt",
            output: "${BASE_DIR}/junit-report.xml"
          )
        }
      }
    }
    /**
     Publish Docker images.
     */
    stage('Publish Docker image'){
      environment {
        DOCKER_IMG_TAG = "${env.DOCKER_IMG}:${env.GIT_BASE_COMMIT}"
        DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG}:${env.BRANCH_NAME}"
      }
      steps {
        cleanup()
        dir("${BASE_DIR}"){
          dockerLogin(secret: "${env.DOCKER_REGISTRY_SECRET}",
            registry: "${env.DOCKER_REGISTRY}")
          sh(label: 'Build Docker image',
            script: "docker build -t ${env.DOCKER_IMG_TAG} .")
          sh(label: 'Push Docker image sha',
            script: "docker push ${env.DOCKER_IMG_TAG}")
          sh(label: 'Re-tag Docker image',
            script: "docker tag ${env.DOCKER_IMG_TAG} ${env.DOCKER_IMG_TAG_BRANCH}")
          sh(label: 'Push Docker image name',
            script: "docker push ${env.DOCKER_IMG_TAG_BRANCH}")
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}
